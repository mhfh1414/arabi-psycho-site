# -*- coding: utf-8 -*-
# Addiction.py — نسخة موسّعة جدًا (تعليمي/إرشادي)
# تفاصيل: تصنيفات المواد، التأثيرات، المخاطر، أعراض انسحاب، مراحل علاج،
# دعم غير دوائي، لمحة خيارات علاجية عامة، نماذج متابعة يومية للرغبة (Craving),
# مذكّرات مسببات/مهارات، وخطة وقاية من الانتكاس مع نموذج تعبئة.

from typing import Dict, List, Any

class Addiction:
    def __init__(self) -> None:
        # ===== تصنيفات المواد =====
        self.المواد: Dict[str, Dict[str, Any]] = {
            "الكحول (مثبّط)": {
                "أمثلة": ["مشروبات كحولية"],
                "تأثيرات": ["استرخاء", "نقص كفّ", "ضعف حكم"],
                "مخاطر": ["إدمان", "انسحاب خطِر", "مشاكل كبد/قلب"]
            },
            "البنزوديازيبينات": {
                "أمثلة": ["ديازيبام", "ألبرازولام"],
                "تأثيرات": ["قلق أقل", "تسكين"],
                "مخاطر": ["تحمّل/اعتماد", "انسحاب قد يكون خطِر"]
            },
            "أفيونات": {
                "أمثلة": ["هيروين", "مورفين", "أوكسيكودون", "ترامادول"],
                "تأثيرات": ["تسكين قوي", "نشوة"],
                "مخاطر": ["تثبيط تنفّس", "جرعة زائدة", "اعتماد شديد"]
            },
            "منبّهات": {
                "أمثلة": ["أمفيتامين/ميث", "كوكايين", "كبتاجون"],
                "تأثيرات": ["طاقة/يقظة", "نقص شهية"],
                "مخاطر": ["قلق/ذهان محفّز", "مشاكل قلبية", "اعتماد"]
            },
            "كانابينويدات": {
                "أمثلة": ["حشيش/THC"],
                "تأثيرات": ["استرخاء", "تغيّر إدراك الوقت"],
                "مخاطر": ["قلق/ذهان عند قابلية", "اعتماد نفسي"]
            },
            "مهلوسات": {
                "أمثلة": ["LSD", "سيلوسايبن", "DMT"],
                "تأثيرات": ["تغيّر حسي/إدراكي"],
                "مخاطر": ["ذهان عابر", "قلق شديد لدى البعض"]
            },
            "مستنشقات/مذيبات": {
                "أمثلة": ["غراء", "بنزين", "أبخرة"],
                "تأثيرات": ["دوار/نشوة قصيرة"],
                "مخاطر": ["سمّية عصبية/قلبية", "ضرر رئوي"]
            },
            "تبغ/نيكوتين": {
                "أمثلة": ["سجائر/شيشة"],
                "تأثيرات": ["تنبيه خفيف", "اعتماد سريع"],
                "مخاطر": ["أمراض رئة/قلب"]
            }
        }

        # ===== انسحاب =====
        self.انسحاب: Dict[str, List[str]] = {
            "الكحول/البنزوز": ["قلق شديد", "رجفة", "تعرّق", "اختلاجات (خطر طبي)"],
            "أفيونات": ["ألم عضلي", "سيلان أنف", "غثيان/إسهال", "أرق"],
            "منبّهات": ["تعب شديد", "مزاج منخفض", "نوم زائد", "اشتهاء"],
            "كانابينويدات": ["تهيج", "أرق", "انخفاض شهية"],
            "نيكوتين": ["اشتهاء", "انفعال", "زيادة شهية"]
        }

        # ===== مراحل علاج =====
        self.مراحل_العلاج: List[str] = [
            "1) إزالة السموم (Detox) بإشراف عند الحاجة",
            "2) تأهيل نفسي/سلوكي (جلسات فردية/جماعية)",
            "3) معالجة الاضطرابات المصاحبة (قلق/اكتئاب…)",
            "4) إعادة اندماج اجتماعي/وظيفي",
            "5) متابعة ووقاية من الانتكاس طويلة المدى"
        ]

        # ===== دعم غير دوائي وخيارات عامة (تعليمية) =====
        self.دعم_غير_دوائي: Dict[str, List[str]] = {
            "مهارات_مواجهة": ["تأجيل/تشتيت", "اتصال بداعم", "خطة 5 دقائق تنفّس/مشي"],
            "روتين": ["نوم كافٍ", "نشاط بدني", "تغذية", "هيكلة اليوم"],
            "دعم_اجتماعي": ["مجموعات تعافي", "داعم مسؤول", "علاقات صحية"]
        }
        self.خيارات_علاجية_عامة: Dict[str, str] = {
            "أفيونات": "برامج متخصصة وخطط بإشراف مختصّين (التفاصيل طبية—خارج نطاق هذا المحتوى التعليمي).",
            "الكحول/البنزوز": "انسحاب قد يكون خطراً—ضرورة تقييم طبي.",
            "منبّهات/كانابينويدات/تبغ": "برامج سلوكية ودعم مجتمعي فعّالة."
        }

        # ===== خطة وقاية من الانتكاس + تتبّع يومي للرغبة =====
        self.وقاية_انتكاس: Dict[str, List[str]] = {
            "محفزات": ["أماكن/أصدقاء", "ضغط نفسي", "ملل/وحدة"],
            "مهارات": ["اتصل بداعم", "تنفّس عميق", "مشي سريع", "تأجيل 24 ساعة"],
            "دعم": ["مجموعة تعافي", "جلسة متابعة أسبوعية", "خطة عائلية"],
            "نمط": ["نوم", "رياضة", "غذاء", "هوايات"]
        }
        self.تتبّع_الرغبة_حقول = ["التاريخ", "الوقت", "شدة_الرغبة (0-10)", "الموقف/المحفز", "مهارة_مستخدمة", "النتيجة"]

    # ===== HTML =====
    def _safe(self, s: str) -> str:
        return (s or "").replace("<","&lt;").replace(">","&gt;")

    def html_المواد(self) -> str:
        out = ["<h2>تصنيفات المواد</h2>"]
        for cat, info in self.المواد.items():
            out += [
                "<div class='card'>",
                f"<h3>{cat}</h3>",
                "<p><b>أمثلة:</b> " + ", ".join(info["أمثلة"]) + "</p>",
                "<p><b>تأثيرات:</b> " + ", ".join(info["تأثيرات"]) + "</p>",
                "<p><b>مخاطر:</b> " + ", ".join(info["مخاطر"]) + "</p>",
                "</div>"
            ]
        return "\n".join(out)

    def html_انسحاب(self) -> str:
        items = "".join([f"<li><b>{k}:</b> {', '.join(v)}</li>" for k, v in self.انسحاب.items()])
        return "<h2>أعراض الانسحاب</h2><ul>" + items + "</ul>"

    def html_مراحل(self) -> str:
        return "<h2>مراحل العلاج</h2><ol>" + "".join([f"<li>{x}</li>" for x in self.مراحل_العلاج]) + "</ol>"

    def html_دعم(self) -> str:
        parts = ["<h2>دعم غير دوائي</h2>"]
        for k, lst in self.دعم_غير_دوائي.items():
            parts.append(f"<h3>{k.replace('_',' ')}</h3><ul>" + "".join([f"<li>{x}</li>" for x in lst]) + "</ul>")
        parts.append("<p class='note'>معلومة عامة—استشر مختصًا عند الضرورة.</p>")
        return "\n".join(parts)

    def html_خيارات(self) -> str:
        items = "".join([f"<li><b>{k}:</b> {v}</li>" for k, v in self.خيارات_علاجية_عامة.items()])
        return "<h2>لمحة عامة عن خيارات علاجية</h2><ul>" + items + "</ul>"

    def html_قالب_انتكاس(self) -> str:
        inputs = [f"<label>{k}</label><textarea name='{k}' rows='2' style='width:100%'></textarea>" for k in ["محفزات","مهارات","دعم","نمط"]]
        return f"<form method='post' action='/addiction/relapse-plan'>{' '.join(inputs)}<button type='submit'>عرض/طباعة الخطة</button></form>"

    def html_عرض_انتكاس(self, بيانات: Dict[str, str]) -> str:
        rows = "".join([f"<tr><th>{k}</th><td>{self._safe(v)}</td></tr>" for k, v in بيانات.items()])
        return "<table class='table'>%s</table>" % rows

    # تتبّع رغبة (Craving) يومي
    def html_تتبع_نموذج(self) -> str:
        inputs = [f"<label>{n}</label><input name='{n}'/>" if "الموقف" not in n and "مهارة" not in n and "النتيجة" not in n
                  else f"<label>{n}</label><textarea name='{n}' rows='2' style='width:100%'></textarea>"
                  for n in self.تتبّع_الرغبة_حقول]
        return f"<form method='post' action='/addiction/craving'>{' '.join(inputs)}<button type='submit'>إضافة/عرض</button></form>"

    def html_تتبع_عرض(self, صف: Dict[str, str]) -> str:
        cells = "".join([f"<tr><th>{k}</th><td>{self._safe(v)}</td></tr>" for k, v in صف.items()])
        return "<table class='table'>%s</table>" % cells
